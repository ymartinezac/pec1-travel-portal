{"mappings":"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","sources":["src/components/snorkeling/snorkeling.tsx","node_modules/@parcel/runtime-js/lib/runtime-cf463747af66b393.js","node_modules/src/observe.ts","node_modules/src/InView.tsx","node_modules/src/useInView.tsx"],"sourcesContent":["import React from \"react\";\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport mask from '../../assets/diving-mask-snorkel.svg';\nimport { useInView, InView } from 'react-intersection-observer';\n\nconst Snorkeling = () => {\n    const [ref, inView, entry] = useInView({\n        threshold: 0,\n      });\n    return (\n        <section ref={ref} className={inView ? \"snorkel visible\" : \"snorkel invisible\"} >\n                <h1>Sum√©rgete en nuestros <span>snorkeling tours</span></h1>\n                <LazyLoadImage className=\"snorkel-svg\" src={mask} alt=\"snorkel mask\" width=\"275\" height=\"340\" />\n             \n                \n            </section> \n\n    )\n  \n    \n}\n\n\nconst Component = () => {\n \n    <InView as=\"div\" >\n    <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n  </InView>\n  };\nexport default Snorkeling;","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"5Fbst\")).toString();","import { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["$cab3c86f2f37c942$export$2e2bcd8739ae039","ref","inView","entry","$ht8op","useInView","threshold","$4OBzV","jsxs","className","$dFzLu","LazyLoadImage","src","$parcel$interopDefault","$jINgv","alt","width","height","module","exports","URL","parcelRequire","resolve","import","meta","url","toString","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","$cb7ba7b9f11d9713$var$optionsToId","options","Object","elements","sort","filter","key","thresholds","entries","forEach","root","map","has","$cb7ba7b9f11d9713$var$RootIds","set","$cb7ba7b9f11d9713$var$rootId","get","$cb7ba7b9f11d9713$export$d1203567a167490e","createObserver","id","fallbackInView","observer","callbacks","element","$cb7ba7b9f11d9713$var$unsupportedValue","observe","bounds","unobserve","getBoundingClientRect","callback","intersectionRatio","intersectionRect","size","_createObserver","$cb7ba7b9f11d9713$var$observerMap","isVisible","_elements$get","isIntersecting","some","trackVisibility","target","window","instance","$cb7ba7b9f11d9713$var$createObserver","node","_unobserveCb","_React$Component","_this","delay","props","triggerOnce","skip","setState","initialInView","isPlainChildren","handleChange","React","InView","_proto","componentDidUpdate","state","rootMargin","prevProps","this","setRef","componentWillUnmount","_this$props","current","render","Array","$cb7ba7b9f11d9713$var$isPlainChildren","_this$state","children","handleNode","_this$props2","as","tag","$cb7ba7b9f11d9713$var$_objectWithoutPropertiesLoose","$cb7ba7b9f11d9713$var$_excluded","$5z1DB","useEffect","Component","displayName"],"version":3,"file":"snorkeling.5d7217e4.js.map"}